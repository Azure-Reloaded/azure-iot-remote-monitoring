@using System.Globalization
@using Microsoft.Azure.Devices
@using Microsoft.Azure.Devices.Applications.RemoteMonitoring.Common.Extensions
@using Microsoft.Azure.Devices.Applications.RemoteMonitoring.Common.Helpers
@using Microsoft.Azure.Devices.Applications.RemoteMonitoring.DeviceAdmin.Infrastructure.Models
@using Microsoft.Azure.Devices.Applications.RemoteMonitoring.DeviceAdmin.Web.Helpers
@using GlobalResources

@model Microsoft.Azure.Devices.Applications.RemoteMonitoring.DeviceAdmin.Web.Models.DeviceDetailModel
@{
    DateTime? resolvedDate;
    var tags = Model.DevicePropertyValueModels.Where(m => m.Name.StartsWith("tags."));
    var desiredProperties = Model.DevicePropertyValueModels.Where(m => m.Name.StartsWith("properties.desired."));
    var reportedProperties = Model.DevicePropertyValueModels.Where(m => m.Name.StartsWith("properties.reported."));
    var deviceProperties = Model.DevicePropertyValueModels.Except(tags).Except(desiredProperties).Except(reportedProperties);
    var utcNow = DateTime.UtcNow;
}
<div class="header_grid header_grid_general">
    <h3 class="grid_subheadhead_detail">@Strings.DeviceProperties</h3>
    <img src="~/Content/img/icon_info_gray.svg" class="details_grid_info" title="@Strings.DevicePropertiesFormattedAsStored" />
    @if (Model.IsDeviceEditEnabled)
    {
        @Html.ActionLink(@Strings.Edit, "EditDeviceProperties", "Device", new { deviceId = Model.DeviceID }, new
   {
       id = "edit_metadata_link",
       @class = string.Format("{0} {1}", "link_grid_subheadhead_detail", Model.HubEnabledState == false ? "hidden" : string.Empty).Trim()
   })
    }

</div>

<section class="details_grid_general" id="deviceDetailsGrid">
    @foreach (var propVal in deviceProperties)
    {
        <h4 class="grid_subhead_detail_label">@DeviceDisplayHelper.GetDevicePropertyFieldLocalName(propVal.Name)</h4>
        if (DeviceDisplayHelper.GetIsCopyControlPropertyName(propVal.Name))
        {
            string classname = "text_copy_container__input--details_grid";
            string class_styles_modifier = "text_copy_container--details_grid";
            string button_style_modifier = "details_grid_general__copy_button";
            @IoTHelpers.TextCopy(propVal.Name, classname, propVal.Value, class_styles_modifier, button_style_modifier);
        }
        else
        {
            if ((propVal.PropertyType == PropertyType.DateTime) &&
                (resolvedDate = DynamicValuesHelper.ConvertToDateTime(CultureInfo.InvariantCulture, propVal.Value)).HasValue)
            {
                <p class="grid_detail_value" name="deviceField_@propVal.Name">@resolvedDate.Value.ToString()</p>
            }
            else
            {
                <p class="grid_detail_value" name="deviceField_@propVal.Name">@propVal.Value</p>
            }
        }
    }
</section>

<div class="header_grid header_grid_general">
    <h3 class="grid_subheadhead_detail">@Strings.Tags</h3>
    <img src="~/Content/img/icon_info_gray.svg" class="details_grid_info" title="@Strings.TagsTooltip" />
    @Html.ActionLink(@Strings.Edit, "EditTags", "Device", new { deviceId = Model.DeviceID }, new
{
    id = "edit_tags_link",
    @class = string.Format("{0} {1}", "link_grid_subheadhead_detail", Model.HubEnabledState == false ? "hidden" : string.Empty).Trim()
})
</div>

<section class="details_grid_general" id="tagsGrid">
    @foreach (var val in tags)
    {
        <h4 class="grid_subhead_detail_label">@val.Name.Substring(5)</h4>
        if (val.PropertyType == PropertyType.DateTime && (resolvedDate = DynamicValuesHelper.ConvertToDateTime(CultureInfo.InvariantCulture, val.Value)).HasValue)
        {
            <p class="grid_detail_value" name="tagField_@val.Name">@resolvedDate.Value.ToString()</p>
        }
        else
        {
            <p class="grid_detail_value" name="tagField_@val.Name">@val.Value</p>
        }
    }
</section>

<div class="header_grid header_grid_general">
    <h3 class="grid_subheadhead_detail">@Strings.DesiredProperties</h3>
    <img src="~/Content/img/icon_info_gray.svg" class="details_grid_info" title="@Strings.DesiredPropertiesTooltip" />
    @Html.ActionLink(@Strings.Edit, "EditDesiredProperties", "Device", new { deviceId = Model.DeviceID }, new
{
    id = "edit_desiredProperties_link",
    @class = string.Format("{0} {1}", "link_grid_subheadhead_detail", Model.HubEnabledState == false ? "hidden" : string.Empty).Trim()
})
</div>

<section class="details_grid_general" id="desiredPropertiesGrid">
    @foreach (var val in desiredProperties)
    {
        <h4 class="grid_subhead_detail_label">@val.Name.Substring(19)</h4>
        <div>
            <p class="grid_detail_value" name="desiredPropertyField_@val.Name">
                @if (val.PropertyType == PropertyType.DateTime && (resolvedDate = DynamicValuesHelper.ConvertToDateTime(CultureInfo.InvariantCulture, val.Value)).HasValue)
                {
                    @resolvedDate.Value.ToString()
                }
                else
                {
                    @val.Value
                }
                <span class="grid_detail_lastUpdated pull-right" name="desiredPropertyField_lastUpdated_@val.Name">@TimeSpanExtension.ToFloorShortString(utcNow - val.LastUpdatedUtc, Strings.LastUpdatedFormatString)</span>
            </p>
        </div>
    }
</section>

@if (reportedProperties.Any())
{
    <div class="header_grid header_grid_general">
        <h3 class="grid_subheadhead_detail">@Strings.ReportedProperties</h3>
        <img src="~/Content/img/icon_info_gray.svg" class="details_grid_info" title="@Strings.ReportedPropertiesTooltip" />
    </div>

    <section class="details_grid_general" id="reportedPropertiesGrid">
        @foreach (var val in reportedProperties)
        {
            <h4 class="grid_subhead_detail_label">@val.Name.Substring(20)</h4>
            <div>
                <p class="grid_detail_value" name="reportedPropertyField_@val.Name">
                    @if (val.PropertyType == PropertyType.DateTime && (resolvedDate = DynamicValuesHelper.ConvertToDateTime(CultureInfo.InvariantCulture, val.Value)).HasValue)
                    {
                        @resolvedDate.Value.ToString()
                    }
                    else
                    {
                        @val.Value
                    }
                    <span class="grid_detail_lastUpdated pull-right" name="reportedPropertyField_lastUpdated_@val.Name">@TimeSpanExtension.ToFloorShortString(utcNow - val.LastUpdatedUtc, Strings.LastUpdatedFormatString)</span>
                </p>
            </div>
        }
    </section>
}

@if (Model.NamedDeviceJobs.Any())
{
    <div class="header_grid header_grid_general">
        <h3 class="grid_subheadhead_detail">@Strings.RecentJobs</h3>
        <img src="~/Content/img/icon_info_gray.svg" class="details_grid_info" title="@Strings.RecentJobsTooltip" />
        @Html.ActionLink(@Strings.ViewAll, "ViewAllJobHistory", "Device", new { deviceId = Model.DeviceID }, new
   {
       id = "viewall_link",
       @class = string.Format("{0} {1}", "link_grid_subheadhead_detail", Model.NamedDeviceJobs.Count() <= 5 ? "hidden" : string.Empty).Trim()
   })
    </div>

    <section class="details_grid_general" id="reportedPropertiesGrid">
        @foreach (var jobModel in Model.NamedDeviceJobs.OrderByDescending(pair => pair.Job.LastUpdatedDateTimeUtc).Take(5))
        {
            <div class="overflow_auto">
                @Html.ActionLink(jobModel.Name.Any() ? jobModel.Name : "[" + jobModel.Job.JobId + "]", "Select", "Job", new { jobId = jobModel.Job.JobId }, new { @class = "link_grid_jobName" })
                <div class="grid_container_job pull-right">
                    @switch (jobModel.Job.Status)
                    {
                        case DeviceJobStatus.Completed:
                            <img src="~/Content/img/icon_status_all_clear.svg" class="details_grid_info pull-left" />
                            break;
                        case DeviceJobStatus.Failed:
                            <img src="~/Content/img/icon_status_alarm.svg" class="details_grid_info pull-left" />
                            break;
                        default:
                            <img src="~/Content/img/icon_status_information.svg" class="details_grid_info pull-left" />
                            break;
                    }
                    <p class="grid_detail_jobStatus pull-right">@jobModel.Job.Status.ToString()</p>
                </div>
                <div class="clear_both">
                    <p class="grid_detail_lastUpdated pull-right">@TimeSpanExtension.ToFloorShortString(utcNow - jobModel.Job.LastUpdatedDateTimeUtc, Strings.LastUpdatedFormatString)</p>
                </div>
            </div>
        }
    </section>
}